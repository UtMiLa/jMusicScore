var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var JMusicScore;
(function (JMusicScore) {
    var Editors;
    (function (Editors) {
        var MidiHelper = (function () {
            function MidiHelper(eventReceiver) {
                this.eventReceiver = eventReceiver;
            }
            MidiHelper.prototype.trigger = function (eventtype, event) {
                this.eventReceiver.processEvent(eventtype.toLowerCase(), event);
            };
            MidiHelper.prototype.midiProc = function (t, a, b, c) {
                this.trigger("rawMidiIn", {
                    param1: a,
                    param2: b,
                    param3: c,
                    time: t
                });
                var cmd = Math.floor(a / 16);
                var noteB = b;
                var i;
                var b1 = (b < 16 ? '0' : '') + b.toString(16);
                var c1 = (c < 16 ? '0' : '') + c.toString(16);
                if (cmd == 8) {
                    this.releaseKey(noteB);
                    this.trigger("midiNoteOff", {
                        noteInt: noteB,
                        time: t
                    });
                }
                else if (cmd == 9) {
                    if (c == 0) {
                        this.releaseKey(noteB);
                        this.trigger("midiNoteOff", {
                            noteInt: noteB,
                            time: t
                        });
                    }
                    else {
                        this.pressKey(noteB);
                        this.trigger("midiNoteOn", {
                            noteInt: noteB,
                            time: t
                        });
                    }
                }
                else if (cmd == 10) {
                    this.trigger("midiAftertouch", {
                        aftNote: noteB,
                        aftValue: c1,
                        time: t
                    });
                }
                else if (cmd == 11) {
                    this.trigger("midiControl", {
                        ctlNo: b1,
                        ctlValue: c1,
                        time: t
                    });
                }
                else if (cmd == 12) {
                    this.trigger("midiProgramChg", {
                        progNo: b1,
                        progValue: c1,
                        time: t
                    });
                }
                else if (cmd == 13) {
                }
                else if (cmd == 14) {
                }
            };
            MidiHelper.prototype.midiOpen = function (newMidiIn) {
                var _this = this;
                if (!this.jazz) {
                    var r = $('<object>')
                        .attr('classid', "CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90")
                        .addClass("hidden");
                    var s = $('<object>')
                        .attr('type', "audio/x-jazz")
                        .addClass("hidden");
                    s.append('<p style="visibility:visible;">This page requires <a href="http://jazz-soft.net/">Jazz-Plugin</a> ...</p>');
                    r.append(s);
                    $('#MidiInStuff').append(r);
                    this.jazz = r[0];
                    if (!this.jazz || !this.jazz.isJazz)
                        this.jazz = s[0];
                }
                this.midiInVars = {
                    current_in: this.jazz.MidiInOpen(newMidiIn, function (t, a, b, c) {
                        _this.midiProc(t, a, b, c);
                    }),
                    midiKeysPressed: [],
                    currentChord: []
                };
                return this.jazz;
            };
            MidiHelper.prototype.midiSend = function (arg2) {
                this.jazz.MidiOut(arg2.code, arg2.a1, arg2.a2);
            };
            MidiHelper.prototype.midiClose = function () {
                this.jazz.MidiInClose();
                this.midiInVars.current_in = '';
            };
            MidiHelper.prototype.midiInList = function () {
                return this.jazz.MidiInList();
            };
            MidiHelper.prototype.releaseKey = function (arg) {
                var i;
                while ((i = this.midiInVars.midiKeysPressed.indexOf(arg)) > -1) {
                    this.midiInVars.midiKeysPressed.splice(i, 1);
                }
                if (this.midiInVars.midiKeysPressed.length == 0) {
                    this.trigger("midiChordReleased", {
                        chord: this.midiInVars.currentChord.sort()
                    });
                    this.midiInVars.currentChord = [];
                }
            };
            MidiHelper.prototype.pressKey = function (arg) {
                this.midiInVars.currentChord.push(arg);
                this.midiInVars.midiKeysPressed.push(arg);
            };
            Object.defineProperty(MidiHelper.prototype, "currentIn", {
                get: function () {
                    return this.midiInVars.current_in;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiHelper.prototype, "keysPressed", {
                get: function () {
                    return this.midiInVars.midiKeysPressed.sort();
                },
                enumerable: true,
                configurable: true
            });
            return MidiHelper;
        })();
        Editors.MidiHelper = MidiHelper;
        var MidiInputPlugin = (function () {
            function MidiInputPlugin() {
            }
            MidiInputPlugin.getMidiHelper = function (app) {
                if (!this._midiHelper)
                    this._midiHelper = new MidiHelper(app);
                return this._midiHelper;
            };
            MidiInputPlugin.prototype.setMidiChannel = function (val) {
                if (this.midiChannel !== val) {
                }
                this.midiChannel = val;
            };
            MidiInputPlugin.prototype.init = function (app) {
                var activeElement;
                this.midiHelper = MidiInputPlugin.getMidiHelper(app);
                var me = this;
                function connectMidiIn() {
                }
                function disconnectMidiIn() {
                }
                function onFocusIe() {
                    this.active_element = document.activeElement;
                    connectMidiIn();
                }
                function onBlurIe() {
                    if (this.active_element != document.activeElement) {
                        activeElement = document.activeElement;
                        return;
                    }
                    disconnectMidiIn();
                }
                setTimeout(function () {
                    try {
                        me.midiHelper.midiOpen(0);
                        app.addPlugin(new MidiMenuPlugin(me.midiHelper));
                    }
                    catch (err) {
                        $('#MidiInStuff').hide();
                        return;
                    }
                    if (navigator.appName == 'Microsoft Internet Explorer') {
                        document.onfocusin = onFocusIe;
                        document.onfocusout = onBlurIe;
                    }
                    else {
                        window.onfocus = connectMidiIn;
                        window.onblur = disconnectMidiIn;
                    }
                }, 100);
            };
            MidiInputPlugin.prototype.getId = function () { return 'MidiInputPlugin'; };
            return MidiInputPlugin;
        })();
        Editors.MidiInputPlugin = MidiInputPlugin;
        var MidiSettingsDialog = (function (_super) {
            __extends(MidiSettingsDialog, _super);
            function MidiSettingsDialog(idPrefix, app, helper) {
                _super.call(this, idPrefix, app);
                this.idPrefix = idPrefix;
                this.app = app;
                this.helper = helper;
                this.dialogId = "MidiDialog";
                this.dialogTitle = "MIDI Setup";
                this.height = 500;
                this.width = 750;
                this.createControls();
            }
            MidiSettingsDialog.prototype.setHelper = function (helper) {
                this.helper = helper;
                return this;
            };
            MidiSettingsDialog.prototype.createControls = function () {
                var values = {
                    "": ' Not connected ',
                };
                try {
                    var list = this.helper.midiInList();
                    for (var i in list) {
                        values[list[i]] = list[i];
                    }
                    this.addWidget(this.midiInCtl = new JApps.Ui.DropdownWidget(values), "midiIn", "Midi in");
                    this.midiInCtl.value = this.helper.currentIn;
                }
                catch (err) {
                    alert("error4");
                }
            };
            MidiSettingsDialog.prototype.onOk = function () {
                var midiChannel = this.midiInCtl.value;
                try {
                    if (midiChannel) {
                        this.helper.midiOpen(midiChannel);
                    }
                    else {
                        this.helper.midiClose();
                    }
                }
                catch (err) {
                    alert("error1: " + err.message);
                }
                return true;
            };
            return MidiSettingsDialog;
        })(JMusicScore.Ui.ScoreDialog);
        var MidiMenuPlugin = (function (_super) {
            __extends(MidiMenuPlugin, _super);
            function MidiMenuPlugin(helper) {
                _super.call(this);
                this.helper = helper;
            }
            MidiMenuPlugin.prototype.getMenuObj = function (app) {
                var me = this;
                return {
                    id: "MidiMenu",
                    caption: "MIDI Setup",
                    action: function () {
                        new MidiSettingsDialog('menu', app, me.helper).show();
                    },
                };
            };
            return MidiMenuPlugin;
        })(JApps.Ui.MenuPlugin);
    })(Editors = JMusicScore.Editors || (JMusicScore.Editors = {}));
})(JMusicScore || (JMusicScore = {}));
//# sourceMappingURL=midiIn.js.map